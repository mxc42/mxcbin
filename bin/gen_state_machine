#!/usr/bin/python3

# Generates a C file for a state machine
# @arg1 the name of the state machine file
# @arg[2:] list of states

import sys

state_post = '_st'
define_post = '_ST_STRING'

h_str = ''
c_str = ''

name = str(sys.argv[1])
print('name:', name)

states = sys.argv[2:]

for x in states:
    print('state:', x)

h_str = h_str + '''#ifndef {1}_H
#define {1}_H

// Standard tick function.
void {0}_tick();

// Call this before you call {0}_tick().
void {0}_init();

#endif /* {1}_H */'''.format(name, name.upper())

c_str = c_str + '''#include <stdint.h>
#include <stdio.h>
#include \"'''
c_str = c_str + name
c_str = c_str + '.h\"\n\n'
c_str = c_str + '// Print debug string defines\n'

for state in states[:-1]:
    c_str = c_str + '#define ' + state.upper() + define_post + ' ' + '\"' + state + state_post + '\\r\\n\"' + '\n'
c_str = c_str + '#define ' + states[-1].upper() + define_post + ' ' + '\"' + states[-1] + state_post + '\\r\\n\"' + '\n\n'

c_str = c_str + '// Other string defines\n'
c_str = c_str + '#define ' + name.upper() + '_TICK_TRANSITION_HIT_DEFAULT \"'
c_str = c_str + name + '_tick state transition switch hit default\\r\\n\"\n'
c_str = c_str + '#define ' + name.upper() + '_TICK_ACTION_HIT_DEFAULT \"'
c_str = c_str + name + '_tick state action switch hit default\\r\\n\"\n'

c_str = c_str + '''
// States for the controller state machine.
'''

c_str = c_str + 'enum ' + name + state_post + '_t {\n'
for state in states[:-1]:
    c_str = c_str + '\t' + state + state_post + ',\n'
c_str = c_str + '\t' + states[-1] + state_post + '\n'
c_str = c_str + '} currentState;\n'

c_str = c_str + '''
// Prints the name of each state as it transitions
void debugStatePrint() {
\tstatic '''
c_str = c_str + name
c_str = c_str + '''_st_t previousState;
\tstatic bool firstPass = true;
\t// Only print the message if:
\t// 1. This the first pass and the value for previousState is unknown.
\t// 2. previousState != currentState - this prevents reprinting the same state name over and over.
\tif (previousState != currentState || firstPass) {
\t\tfirstPass = false;            // previousState will be defined, firstPass is false.
\t\tpreviousState = currentState; // keep track of the last state that you were in.
\t\tswitch (currentState) { // This prints messages based upon the state that you were in.
'''
for state in states:
    c_str = c_str + '\t\tcase ' + state + state_post + ':\n'
    c_str = c_str + '\t\t\tprintf(' + state.upper() + define_post + ');\n'
    c_str = c_str + '\t\t\tbreak;\n'

c_str = c_str + '''\t\t}
\t}
}
'''

c_str = c_str + '''
// init function for the state machine
void '''
c_str = c_str + name + '''_init() {
\tcurrentState = init_st; // set currentState to init_st
}

void '''
c_str = c_str + name + '''_tick() {
\t//debugStatePrint(); // print each state as it transitions

\t// Perform state transition first.
\tswitch(currentState) { // switch statement with the currentState variable
'''
for state in states:
    c_str = c_str + '\tcase ' + state + state_post + ':\n'
    c_str = c_str + '\t\tbreak;\n'
c_str = c_str + '''
\tdefault:
\t\t// display a message if the state machine transition swtch hits default (shouldn't ever happen)
\t\tprintf(''' + name.upper() + '_TICK_TRANSITION_HIT_DEFAULT);'
c_str = c_str + '''
\t\tbreak;
\t}

\t// Perform state action next.
\tswitch(currentState) {
'''
for state in states:
    c_str = c_str + '\tcase ' + state + state_post + ':\n'
    c_str = c_str + '\t\tbreak;\n'

c_str = c_str + '''
\tdefault:
\t\t// display a message if the state machine action switch hits default (shouldn't ever happen)
\t\tprintf(''' + name.upper() + '_TICK_ACTION_HIT_DEFAULT);'
c_str = c_str + '''
\t\tbreak;
\t}
}
'''

h_file = open('./' + name + '.h', 'w')
c_file = open('./' + name + '.c', 'w')

h_file.write(h_str);
c_file.write(c_str);

h_file.close();
c_file.close();

print('')
print('./' + name + '.h')
print('./' + name + '.c')
